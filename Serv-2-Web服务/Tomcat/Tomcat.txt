Tomcat:

	编程语言：
		系统级：C, C++, go, erlang
		应用级：C#, Java, Python, Perl, Ruby, php
			虚拟机：jvm, pvm
			动态网站：asp .net, jsp

	动态网站：
		客户端动态
		服务器动态：
			CGI

		webapp server:
			jsp: tomcat, jboss, jetty
			php: php-fpm

		Java编程语言：
			SUN, James Gosling, Green Project, Oak, Java, SunWorld
			1995: Java 1.0, Write Once, Run Anywhere
			1996: JDK (Java Development Kit)，包含一个JVM（Sun Classic VM）
				JDK 1.0: JVM, Applet, AWT
			1997：JDK 1.1
				JAR文档格式、JDBC、JavaBeans
			1998：JDK 1.2
				Sun把Java技术分拆为三个方向：Java 2
					J2SE: Standard Edition
					J2EE：Enterprise Edition
					J2ME：Mobile Edition
				代表性技术：EJB, Java Plug-in, Swing,
					JIT编译器: Just In Time，即时编译器

			2000：JDK 1.3
				1999：HotSpot虚拟机
			2002：JDK 1.4

			2006年，Sun开源了Java技术；遵循GPL规范；并建立了OpenJDK组织管理此些代码；

			虚拟机：JRockit, HostSpot;

		编程语言的类别：指令+数据
			面向过程：以指令为中心，围绕指令组织数据；
			面向对象：以数据为中心，围绕数据组织指令；

		Java体系结构：
			Java编程语言；
			Java Class文件格式；
			Java API；
			Java VM；

		JVM的核心组成部分：
			Class Loader
			执行引擎

		Java编程语言的特性：
			面向对象、多线程、结构化错误处理
			垃圾收集、动态链接、动态扩展

		三个技术流派：
			J2SE ==> Java 2 SE
			J2EE ==> Java 2 EE
			J2ME ==> Java 2 ME

		JVM运行时区域：运行为多个线程
			方法区：线程共享；用于存储被虚拟加载的类信息、常量、静态变量等；永久代；
			堆：Java堆是jvm所管理的内存中最大的一部分；也是GC管理的主要区域，主流的算法都基于分代收集方式进行：新生代和老年代；线程共享
			Java栈：线程私有，存放线程自己的局部变量等信息；
			PC寄存器（Program Counter Register），线程独占的内存空间；
			本地方法栈：

		JAVA 2 EE：
			JAVA 2 SE
			Servlet, JSP, EJB, JMS, JMX, JavaMail

			Servlet Contaier：
				println("<h1>")

				html标签要硬编码在应用程序中；

			JSP：
				<html>
				<body>
					<h1>...</h1>
				<%
				%>

				</body>
				</html>

			Web Container：
				JDK, Servlet, JSP

				商业实现：
					WebSphere(IBM)
					WebLogic (BEA --> Oracle)
					Oc4j
					Glassfish
					Geronimo
					JOnAS
					JBoss

				开源实现：
					Tomcat
					jetty
					resin

		Tomcat的核心组件：
			catalina: servlet container
			Coyote: http connection
			Jasper: JSP Engine

			Tomcat的开发语言：JAVA

		Tomcat Instance: 运行中的tomcat进程(java进程)
			Server: 即一个tomcat实例；
			Service: 用于将connector关联至engine组件；一个service只能包含一个engine组件和一个或多个connector组件；
			Engine：Tomcat的核心组件，用于运行jsp或servlet代码；
			Connector：接入并解析用户请求，将请求映射为Engine中运行的代码；之后，将运行结果构建成响应报文；
				http, ajp
			Host：类似httpd中的虚拟主机；
			Context：类似于httpd中的alias;

			注意：每个组件都由“类”来实现，有些组件的实现还不止一种；
				顶级类组件：server
				服务类组件：service
				容器类组件：即可以部署webapp的组件，engine, host, context
				连接器组件：connector
				被嵌套类组件：valve, logger, realm


				<server>
					<service>
						<connector />
						<connector />
						...
						<engine>
							<host>
								<context />
								...
							</host>
							...
						</engine>
					</service>
				</server>

			Tomcat的运行模式：
				standalone：通过内置的web server (http connector)来接收客户端请求；
				proxy：由专门的web server服务客户端的http请求；
					in-process: 部署于同一主机；
					network: 部署于不同主机；

		安装Tomcat：
			- 官方站点：http://tomcat.apache.org
			- yum 源中也有
				- yum -y install tomcat
				- yum list all | grep java (jdk)

			部署前提：
				jdk：
					Oracel JDK
						https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
					OpenJDK
						rpm -ivh jdk...
						vim /etc/profile.d/java.sh
							export JAVA_HOME=/usr/java/latest
							export PATH=$JAVA_HOME/bin/:$PATH
						java -version

			部署Tomcat：
				cd /usr/local
				wget ...
				tar -xvf apache-tomcat-8.0.52.tar.gz ...
				ln -sv apache-tomcat-8.0.52 tomcat

				vim /etc/profile.d/tomcat.sh
					export CATALINA_HOME=/usr/local/tomcat
					export PATH=$CATALINA_HOME/bin:$PATH
				. /etc/profile.d/tomcat.sh
				catalina.sh version
				catalina.sh start (用的8080端口确保没被占用)

		Tomcat的目录结构：(yum 安装后 目录在 /usr/share)
			bin: 脚本及启动时用到的类
			lib: 类库
			conf: 配置文件
			logs: 日志文件
			webapps: 应用程序默认部署目录
			work：工作目录
			temp：临时文件目录

		配置文件：
			server.xml: 主配置文件
			context.xml：每个webapp都可以有专用的配置文件，这些配置文件通常位于webapp应用程序目录下的WEB-INF目录中，用于定义会话管理器、JDBC等；conf/context.xml是为各webapp提供默认配置；
			web.xml：每个webapp“部署”之后才能被访问；此文件则用于为所有的webapp提供默认部署相关的配置；
			tomcat-users.xml：用户认证的账号和密码配置文件；
			catalina.policy：当使用-security选项启动tomcat实例时会读取此配置文件来实现其安全运行策略；
			catalina.properties：Java属性的定义文件，用于设定类加载器路径等，以及一些JVM性能相关的调优参数；
			logging.properties：日志相关的配置信息；


回顾： java, tomcat

	java:
		servlet: java 2 ee的一个特殊类；
		jsp: java 2 ee的一个特殊类；

	java 2 ee: java 2 se, servlet, jsp, jmx, javamail, ...

	jsp --> jasper --> servlet --> complie --> bytecodes --> jvm

	tomcat: JWS(Sun) + Jserv(ASF)

	tomcat: jdk + tomcat

	tomcat：server.xml
		server, service, connector, engine, host, context

	部署：
		jvm:
			运行时区域：
				堆：对象；
				栈

Tomcat(2)

	tomcat:
		CentOS 6:
			Oracle JDK, Tomcat
			yum repo:
				jdk
				tomcat6
				tomcat

		CentOS 7:
			OpenJDK 7
			Tomcat 7

		JDK：
			1.6，1.7，1.8

	Java WebAPP 组织结构:
		有特定的组织形式、层次型的目录结构；主要包含了servlet代码文件、JSP页面文件、类文件、部署描述符文件等；
			/usr/local/tomcat/webapps/app1/
				/: webapp的根目录；
				WEB-INF/：当前webapp的私有资源目录，通常存放当前webapp自用的web.xml；
				META-INF/：当前webapp的私有资源目录，通常存放当前webapp自用的context.xml；
				classes/: 此webapp的私有类；
				lib/: 此webapp的私有类，被打包为jar格式类；
				index.jsp：webapp的主页

			webapp归档格式：
				.war：webapp；
				.jar：EJB的类；
				.rar：资源适配器；
				.ear：企业级应用程序；

	手动添加一个测试应用程序：
		1、创建webapp特有的目录结构；
			[root@localhost webapps]# mkdir -pv myapp/{lib,classes,WEB-INF,META-INF}
		2、提供webapp各文件；
			myapp/index.jsp
				<%@ page language="java" %>
				<%@ page import="java.util.*" %>
				<html>
					<head>
						<title>JSP Test Page</title>
					</head>
					<body>
						<% out.println("Hello, world."); %>
					</body>
				</html>

	部署（deployment）webapp相关的操作：
		deploy：部署，将webapp的源文件放置于目标目录、配置tomcat服务器能够基于context.xml文件中定义的路径来访问此webapp; 将其特有类通过class loader装载至tomcat；
			有两种方式：
				自动部署：auto deploy
				手动部署：
					1、冷部署：把webapp复制到指定位置，而后才启动tomcat；
					2、热部署：在不停止tomcat的前提下进行的部分：
						部署工具：manager、ant脚本、tcd（tomcat client deployer）等；
		undeploy：反部署，停止webapp，并从tomcat实例拆除其部分文件和部署名；
		stop：停止，不再向用户提供服务；
		start：启动处于“停止”状态的webapp；
		redeploy：重新部署；

	tomcat自带的应用程序：
		manager app: webapp管理工具
			vim tomcat/conf/tomcat-users.xml
				<tomcat-users>
					<role rolename="manager-gui"/>
					<user username="tomcat" password="s3cret" roles ="manager-gui"/>
				</tomcat-users>
			catalina.sh stop
			catalina.sh start

		host manager：Virtual Hosts管理工具

	tomcat的主配置文件结构：
		<server attribute="value" attribute2="value">
			<service>
				<connector />
				<connector />
				<engine >
					<host name="">
					</host>
					<host name="">
					</host>
					<host name="">
						<context />
						<context />
					</host>
				</engine>
			</service>
		</server>

		AJP: apache jserv protocol, 二进制协议；

	自定义Host及Context示例：
	      <Host name="web1.magedu.com" appBase="/data/webapps/" unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ROOT" reloadable="true">
			  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
		           deny="172\.16\.100\.100"/>
	        </Context>
			<Context path="/shop" docBase="shopxx" reloadable="true" />
	        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/data/logs"
	               prefix="web1_access_log" suffix=".txt"
	               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
	      </Host>

	  	注意：path给定的路径不能以“/”结尾；

	LNMT：
		client -->http --> nginx --> reverse_proxy --> http --> tomcat (http connector)

		location ~* \.(jsp|do)$ {
	    	proxy_pass http://web1.magedu.com:8080;
  		}

  	LAMT：
  		client --> http --> httpd --> reverse_proxy --> {http|ajp} --> tomcat {http connector|ajp connector}

  		反代模块：
  			主：proxy_module
  			子：proxy_module_http, proxy_module_ajp

  		proxy_module_http:
			<VirtualHost *:80>
			    ServerName web1.magedu.com
			    ProxyVia On
			    ProxyRequests Off
			    ProxyPreserveHost On
			    <Proxy *>
			        Require all granted
			    </Proxy>
			    ProxyPass / http://172.16.100.67:8080/
			    ProxyPassReverse / http://172.16.100.67:8080/
			    <Location />
			        Require all granted
			    </Location>
			</VirtualHost>

		proxy_module_ajp:
			<VirtualHost *:80>
			    ServerName web1.magedu.com
			    ProxyVia On
			    ProxyRequests Off
			    ProxyPreserveHost On
			    <Proxy *>
					Require all granted
			    </Proxy>
			    ProxyPass /status !
			    ProxyPass / ajp://172.16.100.67:8009/
			    ProxyPassReverse / ajp://172.16.100.67:8009/
			    <Location />
					Require all granted
			    </Location>
			</VirtualHost>

  	LNAMT：

回顾：tomcat配置和应用
	server.xml, webapp的组织形式, 应用程序的部署, LAMT, LNMT, LNAMT;

		server.xml:
			<server>
				<service>
					<connector port="8080" />
					<connector port="8009" protocol="AJP/1.3" />
					<engine >
						<Host />
						<Host >
							<Context path="" docBase="" />
						</Host>
					</engine>
				</service>
			</server>

		webapp:
			/
			classes
			lib
			META-INF
			WEB-INF

		部署：
			冷部署：
			热部署：manager app, ant, tcd

Tomcat Cluster(3)

	会话保持：
		session sticky
			source ip
			cookie
		session cluster:
		session server
			kv: memcached, redis

	(1) LB tomcat
		nginx tomcats
		apache tomcats
	(2) LB tomcat cluster
	(3) LB tomcat
		session server
			memcached


	apache: tomcats
		(1) apache:
				mod_proxy
				mod_proxy_http
				mod_proxy_balancer
			tomcat:
				http connector
		(2) apache:
				mod_proxy
				mod_proxy_ajp
				mod_proxy_balancer
			tomcat:
				ajp connector
		(3) apache:
				mod_jk
			tomcat:
				ajp connector

	第一种方法的实现：
		<proxy balancer://lbcluster1>
		    BalancerMember http://172.16.100.68:8080 loadfactor=10 route=TomcatA
		    BalancerMember http://172.16.100.69:8080 loadfactor=10 route=TomcatB
		</proxy>

		<VirtualHost *:80>
		    ServerName web1.magedu.com
		    ProxyVia On
		    ProxyRequests Off
		    ProxyPreserveHost On
		    <Proxy *>
		        Require all granted
		    </Proxy>
		    ProxyPass / balancer://lbcluster1/
		    ProxyPassReverse / balancer://lbcluster1/
		    <Location />
		        Require all granted
		    </Location>
		</VirtualHost>


		如果需要会话绑定：
			Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED
			<proxy balancer://lbcluster1>
			    BalancerMember http://172.16.100.68:8080 loadfactor=10 route=TomcatA
			    BalancerMember http://172.16.100.69:8080 loadfactor=10 route=TomcatB
			    ProxySet stickysession=ROUTEID
			</proxy>

			<VirtualHost *:80>
			    ServerName web1.magedu.com
			    ProxyVia On
			    ProxyRequests Off
			    ProxyPreserveHost On
			    <Proxy *>
			        Require all granted
			    </Proxy>
			    ProxyPass / balancer://lbcluster1/
			    ProxyPassReverse / balancer://lbcluster1/
			    <Location />
			        Require all granted
			    </Location>
			</VirtualHost>

	第二种方法的实现：
		#Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED
		<proxy balancer://lbcluster1>
		    BalancerMember ajp://172.16.100.68:8009 loadfactor=10 route=TomcatA
		    BalancerMember ajp://172.16.100.69:8009 loadfactor=10 route=TomcatB
		    ProxySet stickysession=ROUTEID
		</proxy>

		<VirtualHost *:80>
		    ServerName web1.magedu.com
		    ProxyVia On
		    ProxyRequests Off
		    ProxyPreserveHost On
		    <Proxy *>
		        Require all granted
		    </Proxy>
		    ProxyPass / balancer://lbcluster1/
		    ProxyPassReverse / balancer://lbcluster1/
		    <Location />
		        Require all granted
		    </Location>
		</VirtualHost>

	补充:mod_proxy_balancer模块内置的manager：
		<Location /balancer-manager>
		  SetHandler balancer-manager
		  Proxypass !
		  Order Deny,Allow
		  Allow from all
		</Location>

	第三种方式：
		mod_jk：额外编译安装

		(1) 反向代理
			模块配置文件：mod_jk.conf
				LoadModule  jk_module  modules/mod_jk.so
				JkWorkersFile  /etc/httpd/conf.d/workers.properties
				JkLogFile  logs/mod_jk.log
				JkLogLevel  debug
				JkMount  /*  TomcatA
				JkMount  /status/  stat1

			workers配置文件：workers.properties
				worker.list=TomcatA,stat1
				worker.TomcatA.port=8009
				worker.TomcatA.host=172.16.100.68
				worker.TomcatA.type=ajp13
				worker.TomcatA.lbfactor=1
				worker.stat1.type = status

			注意：status的访问要做访问控制；

		(2) 负载均衡
			模块配置文件：mod_jk.conf
				LoadModule  jk_module  modules/mod_jk.so
				JkWorkersFile  /etc/httpd/conf.d/workers.properties
				JkLogFile  logs/mod_jk.log
				JkLogLevel  debug
				JkMount  /*  lbcluster1
				JkMount  /status/  stat1

			workers配置文件：workers.properties
				worker.list = lbcluster1,stat1
				worker.TomcatA.type = ajp13
				worker.TomcatA.host = 172.16.100.68
				worker.TomcatA.port = 8009
				worker.TomcatA.lbfactor = 1
				worker.TomcatB.type = ajp13
				worker.TomcatB.host = 172.16.100.69
				worker.TomcatB.port = 8009
				worker.TomcatB.lbfactor = 1
				worker.lbcluster1.type = lb
				worker.lbcluster1.sticky_session = 0
				worker.lbcluster1.balance_workers = TomcatA, TomcatB
				worker.stat1.type = status

	Session Cluster：

		session manager：会话管理器

			StandardManager
			PersistentManager：
				FileStore
				JDBC
			DeltaManager
			BackupManager

		构建步骤：
			(1) 各节点配置使用deltamaanager：
        <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"
                 channelSendOptions="8">

          <Manager className="org.apache.catalina.ha.session.DeltaManager"
                   expireSessionsOnShutdown="false"
                   notifyListenersOnReplication="true"/>

          <Channel className="org.apache.catalina.tribes.group.GroupChannel">
            <Membership className="org.apache.catalina.tribes.membership.McastService"
                        address="228.0.1.7"
                        port="45564"
                        frequency="500"
                        dropTime="3000"/>
            <Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"
                      address="auto"
                      port="4000"
                      autoBind="100"
                      selectorTimeout="5000"
                      maxThreads="6"/>

            <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
              <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
            </Sender>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"/>
          </Channel>

          <Valve className="org.apache.catalina.ha.tcp.ReplicationValve"
                 filter=""/>
          <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>

          <Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer"
                    tempDir="/tmp/war-temp/"
                    deployDir="/tmp/war-deploy/"
                    watchDir="/tmp/war-listen/"
                    watchEnabled="false"/>

          <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
        </Cluster>

        (2) 为需要使用session cluster的webapps开启session distribution的功能：
        	WEB-INF/web.xml中添加
        		<distributable/>

 	博客作业：
 		(1) nginx, apache(mod_proxy_http, mod_proxy_ajp, mod_jk)反代用户请求至tomcat；
 		(2) nginx, apache(mod_proxy_http, mod_proxy_ajp, mod_jk)负载均衡用户请求至tomcat；额外实现session sticky；
 		(3) tomcat session cluster;

 		实际应用：
 			haproxy --> lamt ()

回顾：tomcat lb cluster, session cluster

	lb cluster：
		nginx, httpd

		nginx: upstream
		httpd: mod_proxy, mod_proxy_balancer
			mod_proxy_http, mod_proxy_ajp

			mod_jk
				worker

	session cluster：
		多播：session replication

			standardmanager
			persistentmanager
			deltamanager
			backupmanager
